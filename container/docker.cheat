% docker

# Docker CE for Linux installation script; curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh
wget -qO- get.docker.com | bash

# Create a tag TARGET_IMAGE[:TAG] that refers to SOURCE_IMAGE[:TAG]
docker tag <SOURCE_IMAGE> <TARGET_IMAGE>

# Push an image SOURCE_IMAGE[:TAG] or a repository to a registry
docker push <SOURCE_IMAGE>

# Build an image from the Dockerfile in the current directory and tag the image
docker build -f <Dockerfile> -t <myimage>:<tag> .

# Update configuration: restart policy
docker update --restart=always <container_id>

# Save an image to a tar archive and do gzip
docker save <image_id> | gzip > myimage_latest.tar.gz

# Load an image from a tar archive or STDIN
docker load < myimage_latest.tar.gz

# Force the removal of a running container (uses SIGKILL)
docker rm -f <container_id>

# Remove image
docker rmi <image_id>

# Create a new bash process inside the container and connect it to the terminal
docker exec -it <container_id> bash

# Exec with user root
docker exec -u root -it <container_id> bash

# Print the last lines of a container's logs
docker logs --tail 100 <container_id> | less

# Print the last lines of a container's logs and following its logs
docker logs -f --tail 100 <container_id>

# show low-level information of container's logpath
docker inspect --format='{{ .LogPath }}' <container_id>

# show low-level information of container's pid
docker inspect --format '{{ .State.Pid }}'  <container_id>

# show low-level information of container's IPAddress
docker inspect --format '{{ .NetworkSettings.IPAddress }}' <container_id>

# List the networks
docker network ls

# Create new network with driver bridge
docker network create -d bridge <network_name>

# Remove all unused networks
docker network prune 

# List volumes
docker volume ls

# Remove all unused local volumes
docker volume prune

$ image_id: docker images --- --headers 1 --column 3
$ container_id: docker ps --- --headers 1 --column 1


% docker-compose

# Builds, (re)creates, starts, and dettaches to containers for all services
docker-compose up -d

# Builds, (re)creates, starts, and dettaches to containers for a service
docker-compose up -d <service_name>

# Print the last lines of a serviceâ€™s logs
docker-compose logs --tail 100 <service_name> | less

# Print the last lines of a service's logs and following its logs
docker-compose logs -f --tail 100 <service_name>

# Start services
docker-compose start

# Stop services
docker-compose stop

# Remove stopped containers
docker-compose rm

# Stop and remove containers, networks, images, and volumes created by up
docker-compose down